package web

import (
	"context"
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"strings"
	"time"

	"testops-export/pkg/config"
	"testops-export/pkg/export"
	"testops-export/pkg/models"
)

// Server –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
type Server struct {
	config  *config.Config
	manager *export.Manager
	httpSrv *http.Server
}

// NewServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
func NewServer(manager *export.Manager) *Server {
	return &Server{
		config:  manager.Config(),
		manager: manager,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
func (s *Server) Start() error {
	mux := http.NewServeMux()
	mux.HandleFunc("/", s.handleIndex)
	mux.HandleFunc("/export", s.handleExport)
	mux.HandleFunc("/download/", s.handleDownload)

	s.httpSrv = &http.Server{
		Addr:    ":" + s.config.WebPort,
		Handler: mux,
	}

	log.Printf("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", s.config.WebPort)
	log.Printf("–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:%s –≤ –±—Ä–∞—É–∑–µ—Ä–µ", s.config.WebPort)

	return s.httpSrv.ListenAndServe()
}

// Shutdown –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
func (s *Server) Shutdown(ctx context.Context) error {
	if s.httpSrv != nil {
		return s.httpSrv.Shutdown(ctx)
	}
	return nil
}

// handleIndex –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
func (s *Server) handleIndex(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º project_id –∏–∑ query
	var files []models.ExportFile
	var err error
	projectIDStr := r.URL.Query().Get("project_id")
	var selectedProjectID int64
	if projectIDStr != "" {
		fmt.Sscanf(projectIDStr, "%d", &selectedProjectID)
		files, err = s.manager.GetExportFiles(selectedProjectID)
	} else {
		files, err = s.manager.GetExportFiles()
	}
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤", http.StatusInternalServerError)
		return
	}

	// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (Projects), —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–∂–µ —Ç–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—â—ë –Ω–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
	projectMap := make(map[int64]struct{})
	for _, p := range s.config.Projects {
		if p.ProjectID != 0 {
			projectMap[p.ProjectID] = struct{}{}
		}
	}
	var projects []models.ProjectInfo
	for id := range projectMap {
		projects = append(projects, models.ProjectInfo{ID: id, Name: fmt.Sprintf("%d", id)})
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	totalSize := int64(0)
	var lastExportTime time.Time

	for _, file := range files {
		totalSize += file.Size
		if file.ModifiedTime.After(lastExportTime) {
			lastExportTime = file.ModifiedTime
		}
	}

	lastExport := "–ù–µ—Ç"
	if !lastExportTime.IsZero() {
		lastExport = lastExportTime.Format("02.01.2006 15:04:05")
	}

	data := models.PageData{
		Files:             files,
		TotalFiles:        fmt.Sprintf("%d", len(files)),
		TotalSize:         s.manager.FormatFileSize(totalSize),
		LastExport:        lastExport,
		Projects:          projects,
		SelectedProjectID: selectedProjectID,
	}

	tmpl, err := template.New("index").Funcs(template.FuncMap{
		"toJson": func(v interface{}) template.JS {
			b, _ := json.Marshal(v)
			return template.JS(b)
		},
	}).Parse(htmlTemplate)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	tmpl.Execute(w, data)
}

// handleExport –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç
func (s *Server) handleExport(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	type req struct {
		ProjectID int64 `json:"project_id"`
	}
	var body req
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	if body.ProjectID == 0 {
		go s.manager.PerformExportParallel()
	} else {
		go s.manager.PerformExportForProjectParallel(body.ProjectID)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"status": "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω"})
}

// handleDownload –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
func (s *Server) handleDownload(w http.ResponseWriter, r *http.Request) {
	filename := r.URL.Path[len("/download/"):]
	if filename == "" {
		http.Error(w, "–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	if strings.Contains(filename, "..") || strings.Contains(filename, "/") || strings.Contains(filename, "\\") {
		http.Error(w, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", http.StatusForbidden)
		return
	}

	data, err := s.manager.DownloadExportFile(filename)
	if err != nil {
		http.Error(w, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filename))
	w.Header().Set("Content-Type", "text/csv")
	w.Write(data)
}

// HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const htmlTemplate = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TestOps Export Manager</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üìä</text></svg>">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }
        .content {
            padding: 30px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #667eea;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }
        .stat-label {
            color: #6c757d;
            margin-top: 5px;
        }
        .actions {
            margin-bottom: 30px;
            text-align: center;
        }
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            display: inline-block;
            margin: 5px;
            transition: background-color 0.3s;
        }
        .btn:hover {
            background: #5a6fd8;
        }
        .btn-secondary {
            background: #6c757d;
        }
        .btn-secondary:hover {
            background: #5a6268;
        }
        .btn:disabled {
            background: #c0c4cc;
            color: #f8f9fa;
            cursor: not-allowed;
            opacity: 0.7;
        }
        .exports-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .exports-table th,
        .exports-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        .exports-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        .exports-table tr:hover {
            background-color: #f8f9fa;
        }
        .download-link {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
        }
        .download-link:hover {
            text-decoration: underline;
        }
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }
        .empty-state h3 {
            margin-bottom: 10px;
            color: #495057;
        }
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .status-active {
            background-color: #28a745;
        }
        .status-inactive {
            background-color: #dc3545;
        }
        .header-icon {
            font-size: 3em;
            margin-bottom: 10px;
            display: block;
        }
        .project-select-label {
            font-weight: 500;
            margin-right: 8px;
            color: #495057;
        }
        .project-select {
            padding: 8px 16px;
            border-radius: 6px;
            border: 1px solid #ced4da;
            font-size: 1em;
            background: #f8f9fa;
            color: #495057;
            transition: border-color 0.2s;
            outline: none;
            margin-right: 10px;
        }
        .project-select:focus {
            border-color: #667eea;
            background: #fff;
        }
        @media (max-width: 768px) {
            .header h1 {
                font-size: 2em;
            }
            .content {
                padding: 20px;
            }
            .exports-table {
                font-size: 0.9em;
            }
            .exports-table th,
            .exports-table td {
                padding: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>TestOps Export Manager</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ —Ç–µ—Å—Ç–∫–µ–π—Å–æ–≤</p>
        </div>
        
        <div class="content">
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">{{.TotalFiles}}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{{.TotalSize}}</div>
                    <div class="stat-label">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{{.LastExport}}</div>
                    <div class="stat-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç</div>
                </div>
                <div class="stat-card">
                    <div class="status-indicator status-active"></div>
                    <div class="stat-label">–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞</div>
                </div>
            </div>

            <div class="actions">
                <form id="projectForm" style="display:inline;">
                    <label for="projectSelect" class="project-select-label">–ü—Ä–æ–µ–∫—Ç:</label>
                    <select id="projectSelect" name="project_id" class="project-select" onchange="document.getElementById('projectForm').submit()">
                        <option value="" {{if eq .SelectedProjectID 0}}selected{{end}}>–í—Å–µ</option>
                        {{range .Projects}}
                        <option value="{{.ID}}" {{if eq $.SelectedProjectID .ID}}selected{{end}}>{{.Name}}</option>
                        {{end}}
                    </select>
                </form>
                <button id="exportBtn" class="btn" {{if eq .SelectedProjectID 0}}disabled{{end}}>–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Å–µ–π—á–∞—Å</button>
                <button type="button" class="btn btn-secondary" onclick="location.reload();">–û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>

            <div id="exportStatus" style="text-align:center; margin-bottom:20px; color:#28a745; display:none;"></div>

            <div style="text-align:center; margin-bottom:20px; color:#6c757d; font-size:0.9em;">
                <p>‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ 10:00 UTC (13:00 MSK) –ø–æ –±—É–¥–Ω—è–º</p>
                <p>üìÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ UTC</p>
                <p>üîÑ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø–æ–ø—ã—Ç–∫—É –¥–æ 10 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15-150 –º–∏–Ω—É—Ç</p>
            </div>

            {{if .Files}}
            <table class="exports-table">
                <thead>
                    <tr>
                        <th>–§–∞–π–ª</th>
                        <th>–†–∞–∑–º–µ—Ä</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="exportsTbody">
                    <!-- JS –±—É–¥–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—é–¥–∞ -->
                </tbody>
            </table>
            <button id="showMoreBtn" class="btn" style="display:none;">–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë</button>
            {{else}}
            <div class="empty-state">
                <h3>–≠–∫—Å–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å.</p>
            </div>
            {{end}}
        </div>
    </div>
    <script>
    document.getElementById('exportBtn').onclick = function() {
        var btn = this;
        if (btn.disabled) return;
        btn.disabled = true;
        btn.textContent = '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è...';
        var projectId = Number(document.getElementById('projectSelect').value);
        fetch('/export', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ project_id: projectId })
        })
            .then(r => r.json())
            .then(data => {
                document.getElementById('exportStatus').style.display = 'block';
                document.getElementById('exportStatus').textContent = '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.';
                btn.textContent = '–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Å–µ–π—á–∞—Å';
                btn.disabled = false;
            })
            .catch(() => {
                document.getElementById('exportStatus').style.display = 'block';
                document.getElementById('exportStatus').style.color = '#dc3545';
                document.getElementById('exportStatus').textContent = '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞!';
                btn.textContent = '–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Å–µ–π—á–∞—Å';
                btn.disabled = false;
            });
    };

const allFiles = {{ toJson .Files }};
let shown = 10;

function renderFiles() {
    const tbody = document.getElementById('exportsTbody');
    tbody.innerHTML = '';
    for (let i = 0; i < Math.min(shown, allFiles.length); i++) {
        const f = allFiles[i];
        tbody.innerHTML += '<tr>' +
            '<td>' + f.Name + '</td>' +
            '<td>' + f.FormattedSize + '</td>' +
            '<td>' + f.FormattedDate + '</td>' +
            '<td><a href="/download/' + f.Name + '" class="download-link">–°–∫–∞—á–∞—Ç—å</a></td>' +
        '</tr>';
    }
    document.getElementById('showMoreBtn').style.display = shown < allFiles.length ? '' : 'none';
}

document.getElementById('showMoreBtn').onclick = function() {
    shown += 10;
    renderFiles();
};

window.onload = function() {
    renderFiles();
    if (allFiles.length > 10) document.getElementById('showMoreBtn').style.display = '';
};
    </script>
</body>
</html>
`
