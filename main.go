package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/robfig/cron/v3"

	"testops-export/pkg/config"
	"testops-export/pkg/export"
	"testops-export/pkg/web"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞
	exportManager := export.NewManager(cfg)

	// –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
	server := web.NewServer(exportManager)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := server.Start(); err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	log.Println("–ó–∞–ø—É—Å–∫–∞—é leader election...")
	export.RunWithLeaderElection(func(ctx context.Context) {
		// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ cron
		c := cron.New(cron.WithLocation(time.UTC))

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		// –§–æ—Ä–º–∞—Ç: "–º–∏–Ω—É—Ç—ã —á–∞—Å—ã –¥–µ–Ω—å_–º–µ—Å—è—Ü–∞ –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏"
		// –ü—Ä–∏–º–µ—Ä—ã:
		// "0 7 * * *"     - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 UTC
		// "0 9 * * *"     - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC
		// "30 6 * * *"    - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:30 UTC
		// "0 8 * * 1-5"   - –ø–æ –±—É–¥–Ω—è–º –≤ 8:00 UTC
		// "0 0 * * *"     - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 UTC
		_, err = c.AddFunc(cfg.CronSchedule, func() {
			log.Printf("‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (%s)...", cfg.CronSchedule)
			exportManager.PerformExport()
		})
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cron –∑–∞–¥–∞—á–∏: %v", err)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
		c.Start()
		log.Printf("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: %s", cfg.CronSchedule)

		// –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è graceful shutdown
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		select {
		case <-ctx.Done():
			log.Println("–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
		case <-sigChan:
			log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
		}
		ctxStop := c.Stop()
		<-ctxStop.Done()
		log.Println("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	})
}
